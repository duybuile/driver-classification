table(duplicated(bw.tel.newPol$Client.Cde))
bw.tel.newPol <- subset(bw.tel.newPol, duplicated(bw.tel.newPol$Client.Cde) == FALSE)
bw.tel.renwal <- subset(bw.tel.renwal, duplicated(bw.tel.renwal$Client.Cde) == FALSE)
bw.tel.rebrok <- subset(bw.tel.rebrok, duplicated(bw.tel.rebrok$Client.Cde) == FALSE)
bw.tel.newPol$month <- month(bw.tel.newPol$Post.Date)
bw.tel.renwal$month <- month(bw.tel.renwal$Post.Date)
bw.tel.rebrok$month <- month(bw.tel.rebrok$Post.Date)
table(bw.tel.newPol$month)
table(bw.tel.renwal$month)
table(bw.tel.rebrok$month)
bw.tel <- read.csv("bwTel.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw.tel.rn2015 <- subset(bw.tel, dmy(bw.tel$Effective.Date) >= ymd("2014-01-01")
& dmy(bw.tel$Effective.Date) <= ymd("2014-12-31") )
bw.tel.rn2015 <- subset(bw.tel.rn2015$X == "")
bw.tel.rn2015 <- subset(bw.tel.rn2015, bw.tel.rn2015$X == "")
bw.tel.rn2015 <- subset(bw.tel.rn2015, bw.tel.rn2015$Transact == "RNWP"
|bw.tel.rn2015$Transact == "NEWP"
|bw.tel.rn2015$Transact == "RBRP")
bw.tel.rn2015 <- subset(bw.tel.rn2015, duplicated(bw.tel.rn2015$Client.Cde) == FALSE)
bw.tel.rn2015$month <- month(bw.tel.rn2015$Effective.Date)
table(bw.tel.rn2015$month)
bw <- read.csv("bw2014.csv.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw <- read.csv("bw2014.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw <- subset(bw, bw$X == "")
bw.newPol <- subset(bw, bw$Transact == "NEWP")
bw.renwal <- subset(bw, bw$Transact == "RNWP")
bw.rebrok <- subset(bw, bw$Transact == "RBRP")
bw.newPol <- subset(bw.newPol, duplicated(bw.newPol$Client.Cde) == FALSE)
bw.renwal <- subset(bw.renwal, duplicated(bw.renwal$Client.Cde) == FALSE)
bw.rebrok <- subset(bw.rebrok, duplicated(bw.rebrok$Client.Cde) == FALSE)
bw.newPol$month <- month(bw.newPol$Post.Date)
bw.renwal$month <- month(bw.renwal$Post.Date)
bw.rebrok$month <- month(bw.rebrok$Post.Date)
table(bw.newPol$month)
table(bw.renwal$month)
table(bw.rebrok$month)
bw <- read.csv("bw2014.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw.newPol <- subset(bw, bw$Transact == "NEWP")
bw.renwal <- subset(bw, bw$Transact == "RNWP")
bw.rebrok <- subset(bw, bw$Transact == "RBRP")
bw.newPol <- subset(bw.newPol, duplicated(bw.newPol$Client.Cde) == FALSE)
bw.renwal <- subset(bw.renwal, duplicated(bw.renwal$Client.Cde) == FALSE)
bw.rebrok <- subset(bw.rebrok, duplicated(bw.rebrok$Client.Cde) == FALSE)
bw.newPol$month <- month(bw.newPol$Post.Date)
bw.renwal$month <- month(bw.renwal$Post.Date)
bw.rebrok$month <- month(bw.rebrok$Post.Date)
table(bw.newPol$month)
table(bw.renwal$month)
table(bw.rebrok$month)
tail(bw$Post.Date)
swirl()
library(swirl)
swirl()
swirl()
swirl()
swirl()
swirl()
main()
swirl()
datahub <- read.csv("test_datahub_PC_May.csv", header = TRUE)
electra <- read.csv("test_Electra_PC_May01-04.csv", header = TRUE)
diff <- setdiff(datahub$policy_id, electra$Customer.ID)
inter <- intersect(datahub$policy_id, electra$Customer.ID)
View(datahub)
View(electra)
a <- readline("buswrite.prt")
a <- readLines("buswrite.prt")
a <- read.table("buswrite.prt")
a <- read.table("buswrite.prt",sep = "\t", fill = TRUE, header = TRUE)
View(a)
a <- read.table("buswrite.prt",sep = "|", fill = TRUE, header = TRUE)
a <- read.table("buswrite.prt",sep = "|",header = TRUE)
a <- read.table("buswrite.prt",sep = "|",header = TRUE)
a <- read.table("buswrite.prt",sep = "|",header = FALSE, stringsAsFactors = FALSE)
a <- read.table("buswrite.prt",sep = "|",header = TRUE, stringsAsFactors = FALSE)
scan("buswrite.prt")
a <- readLines("buswrite.prt")
?read.fwf
a <- read.fwf("buswrite.prt")
a <- read.csv("buswrite.prt",sep = "|",header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/analysis-research/trip-csv-generator")
WORKSPACE <- getwd()
FILENAME <- "autoline-tripdata.csv"
tripdata <- read.csv(FILENAME, header = TRUE, sep = ",")
View(tripdata)
View(tripdata)
tripdata <- subset(tripdata, select = c("sub_id", "trip_time", "trip_distance", "accel_aggregate", "accel_events",
"brake_aggregate", "brake_events", "bend_aggregate", "bend_events",
"turn_aggregate", "turn_events", "speed_aggregate", "speed_events",
"corner_aggregate", "corner_events"))
View(tripdata)
setwd("~/")
a <- read.table("buswrite.prt", header = "FALSE", sep = "|")
a <- read.table("buswrite.prt", sep = "|")
View(a)
a <- scan("buswrite.prt", sep = "|")
a <- scan("buswrite.prt", sep = "|", na.strings = FALSE)
a <- scan("buswrite.prt", sep = "|", na.strings = TRUE)
a <- read.table("buswrite.prt", sep = "|")
a <- read.csv("May_AVTAXT_DataHub.csv", header = TRUE)
b <- read.csv("May_AVTAXT_Electra.csv", header = TRUE)
b <- subset(b, b$Insurer == "AVT" | b$Insurer == "AXT")
table(duplicated(a$policy_id))
table(duplicated(b$Customer.ID))
setdiff(a$policy_id, b$Customer.ID)
a <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
b <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
b <- subset(b, b$Insurer == "AVT" | b$Insurer == "AXT")
table(duplicated(a$policy_id))
table(duplicated(b$Customer.ID))
setdiff(a$policy_id, b$Customer.ID)
diff <- subset(a, a$policy_id %in% setdiff(a$policy_id, b$Customer.ID))
View(diff)
year_datahub <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
year_electra <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
year_elccanl <- read.csv("2015_AVTAXT_Electra_Can.csv", header = TRUE)
year_electra <- subset(year_electra, year_electra$Insurer == "AVT" | year_electra$Insurer == "AXT", select = 1:76)
table(duplicated(month_datahub$policy_id))
table(duplicated(month_electra$Customer.ID))
diff <- subset(year_datahub, year_datahub$policy_id %in% setdiff(year_datahub$policy_id, year_electra$Customer.ID))
intersect(diff$policy_id, year_elccanl$Customer.ID)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number"))
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
intersect(diff$policy_id, year_elccanl$Customer.ID)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
View(m)
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number",
"Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
View(m)
strftime(m$renewal_date[1],"%d/%m/%Y")
m$renewal_date <- strftime(m$renewal_date,"%d/%m/%Y")
View(m)
setwd("~/")
library(xlsx2)
library(xlsx)
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE)
year_datahub <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
year_electra <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
year_elccanl <- read.csv("2015_AVTAXT_Electra_Can.csv", header = TRUE)
year_electra <- subset(year_electra, year_electra$Insurer == "AVT" | year_electra$Insurer == "AXT", select = 1:76)
table(duplicated(year_datahub$policy_id))
table(duplicated(year_electra$Customer.ID))
diff <- subset(year_datahub, year_datahub$policy_id %in% setdiff(year_datahub$policy_id, year_electra$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number",
"Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Renewal.Date", "Policy.Number", "Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE, append = TRUE)
m$renewal_date <- strftime(m$renewal_date,"%d/%m/%Y")
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE, append = TRUE)
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
setwd("~")
a <- read.csv("buswrite.prt", sep = "|", header = FALSE)
a <- read.csv("buswrite.prt", sep = "|", header = FALSE, stringsAsFactors = FALSE, strip.white = FALSE)
names(a) <- c("record_type", "client_code", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_type", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description", "special_cancellation")
table(a$record_type)
a <- read.csv("buswrite.prt", sep = "|", header = FALSE, stringsAsFactors = FALSE, strip.white = FALSE)
names(a) <- c("record_type", "client_code", "client_name", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description", "special_cancellation")
names(a) <- c("record_type", "client_code", "client_name", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_type", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description")
table(a$record_type)
table(a$debit_indicator_1)
table(a$debit_indicator_2)
table(a$debit_indicator_3)
table(a$debit_indicator_4)
charge_debit <- subset(a, a$debit_indicator_4 == "D")
head(charge_debit)
head(charge_debit, 10)
test <- subset(a, a$debit_indicator_2 == "D" & a$transaction_value > 0)
head(test)
test <- subset(a, a$debit_indicator_4 == "D" & a$transaction_value > 0)
write.csv(a, "a.csv", col.names = F, row.names = F)
library(xlsx)
write.xlsx(a, "a.xls", col.names = F, row.names = F)
write.xlsx2(a, "a.xls", sheetNames = "a", col.names = F, row.names = F)
test <- subset(a, a$debit_indicator_1 == "D" & a$transaction_value = 0)
test <- subset(a, a$debit_indicator_1 == "D" & a$transaction_value == 0)
test <- subset(a, a$debit_indicator_2 == "D" & a$commission == 0)
test <- subset(a, a$debit_indicator_3 == "D" & a$net_amount == 0)
test <- subset(a, a$debit_indicator_4 == "D" & a$charges == 0)
test <- subset(a, a$debit_indicator_4 == "" & a$charges > 0)
head(test)
test <- subset(a, a$debit_indicator_3 == "" & a$net_amount> 0)
head(test)
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
x <- c(1, 2, 4, 0)
y <- c(0.5,1,2,0)
fit <- lm(y~x)
print(fit)
-1 + 2*6
a = as.matrix(4, 3, 6, 9)
View(a)
matrix(c(4,3,6,9), nrow = 2, ncol = 2)
matrix(c(4,6,3,9), nrow = 2, ncol = 2)
u = matrix(c(4, -4, 3), nrow = 3, ncol = 1)
v = matrix(c(4, 2, 4), nrow = 3, ncol = 1)
t(u)*v
t(u)
x = t(u)
x = as.matrix(t(u))
x*u
4*4+(-4)*2+(-3)*4
x %*% u
x %*% v
x
u = matrix(c(4, -4, -3), nrow = 3, ncol = 1)
t(u)%*%v
duy <- c(343150, 342790, 343234, 297477, 313996, 340309, 343670, 331687, 343915, 343326, 343881, 344129, 342199, 336371, 343386, 337009, 344265, 342940, 341928, 343940, 343935, 341001, 344646, 343071, 318677, 307656, 340460, 343671, 343737, 343807, 344533, 288222, 345074, 345582, 345758, 337208, 345914, 345840, 317103, 343951, 340503, 294280, 341784, 345372, 344279, 346932, 313419, 346909, 346912, 345763, 345456, 347234, 347298, 298957, 347042, 343203, 345827, 346207, 333855, 346385, 347805, 347841, 347522, 345701, 321218, 347932, 346332, 346864, 347682, 343667, 340152, 347910, 347031, 347982, 348257, 347766, 348457, 348676, 348238, 348218, 348541, 103137, 348413, 348694, 346475, 348418, 348530, 345638, 346914, 348620, 348740, 278106, 322097, 348496, 343707, 348055, 349163, 347136, 323094, 349102, 349106, 321452, 304317, 347383, 347849, 349123, 344320, 300544, 348929, 346017, 349303, 297735, 347912, 324639, 349061, 349357, 348952)
david <- c(323434, 301155, 285568, 319478, 300018, 281838, 128886, 323012, 296093, 306371, 306643, 281771, 307711, 306968, 333385, 334894, 217208, 305119, 337928, 337502, 339893, 339463, 315188, 271801, 293059, 296068, 316783, 317193, 337371, 343166, 341603, 343419, 317417, 295333, 274030, 326494, 327094, 342033, 343594, 279300, 343396, 342658, 343640, 342537, 335274, 342072, 238354, 295092, 313925, 292110, 342336, 318156, 344537, 318556, 344441, 343647, 344572, 344111, 344628, 342898, 295748, 343380, 344978, 343053, 294748, 344578, 319018, 327790, 344313, 296521, 244510, 345190, 319363, 343739, 344582, 294403, 344635, 295737, 345370, 312627, 318604, 297016, 319375, 296069, 345641, 224089, 294647, 345718, 319879, 320903, 345617, 345954, 341033, 333234, 324479, 346123, 345925, 297235, 320250, 316730, 320273, 306651, 346236, 344292, 296209, 339653, 320206, 345853, 340164, 345238, 346057, 346012, 345549, 319676, 313772, 346415, 346347, 320626, 311539, 346220, 346647, 293252, 346361, 346296, 296119, 346643, 346993, 346911, 346813, 346957, 346936, 346804, 345601, 297900, 347009, 346921, 345816, 346933, 320833, 320774, 328999, 321053, 321390, 337569, 342836, 347128, 347195, 347475, 346558, 320684, 346659, 346758, 319826, 337842, 321817, 345796, 321802, 298160, 346300, 347945, 343508, 321957, 321460, 347141, 348143, 348165, 348127, 343513, 321313, 317212, 341348, 317859, 347037, 348094, 322211, 118874, 322300, 348406, 322081, 348068, 319754, 348511, 348593, 348384, 348198, 346038, 348499, 335368, 348410, 345092, 346417, 348070, 347927, 347993, 345581, 346371, 346703, 340572, 347787, 347571, 348802, 348278, 313478, 319364, 346589, 349013, 348939, 202990, 349015, 320919, 322885, 348396, 334468, 348349, 348124, 316674, 348948, 349429, 347098, 299159, 349468, 348961, 349021, 349295, 297889, 278690, 349537, 349438, 323618, 347122, 349835, 349895, 323988, 349407, 321049, 348705, 338957, 349869, 348997, 340005, 333655, 350074, 349948, 230056, 312616, 349262, 350095, 348661, 349508, 348794, 115833, 324746, 323487, 346406, 319099)
intersect(x, y)
intersect(duy, david)
diff(duy, david)
setdiff(duy, david)
n = setdiff(duy, david)
.libPaths()
Sys.getenv()
.libPaths()
as.Date(18918, origin="1899-12-30")
library(xlsx)
library(xlsx)
t <- c("355515", "351625", "354967", "341603", "328999", "335831", "345601", "346361", "347475", "348511", "309136", "335357", "342669", "351103", "351249", "351299", "355420", "289207", "294748", "230056", "321957", "326494", "344572", "344628", "351153", "118874", "349468", "343508", "322211", "297016", "316869", "337371")
library(RMySQL)
library(DBI, quietly = TRUE)
getDataFromHubSync <- function(sql){
dbname = "hub_sync"
user = "aline_read_user"
password = "5ync9uT011n3R3AdU53Rj850981"
host = "127.0.0.1"
con <- dbConnect(MySQL(),user=user,
password=password,
dbname=dbname,
host=host)
sql = gsub("\n", " ", sql)
dbSendQuery(con, 'SET @FIRST_DAY_LAST_MONTH = DATE_SUB((CURRENT_DATE - INTERVAL 1 MONTH), INTERVAL DAYOFMONTH(CURRENT_DATE - INTERVAL 1 MONTH)-1 DAY)')
dbSendQuery(con, 'SET @LAST_DAY_LAST_MONTH = LAST_DAY(CURRENT_DATE - INTERVAL 1 MONTH)')
dbSendQuery(con, 'SET @LAST_YEAR = DATE_ADD(NOW(), INTERVAL - 1 YEAR)')
rs <- dbSendQuery(con, sql)
data <- fetch(rs, n=-1)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
on.exit(dbDisconnect(con))
return(data)
}
sql = "SELECT *
FROM customers
INNER JOIN current_insurers
ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers
ON current_insurers.insurer_id = insurers.id
WHERE (policy_status = 'New Policy' or policy_status = 'Rebroked' or policy_status = 'Renewed' or policy_status = 'Pending Renewal' or policy_status = 'Renewal Received')
AND (code = 'AVT' OR code = 'AXT')"
dat <- getDataFromHubSync(sql)
dat <- getDataFromHubSync(sql)
library(RMySQL)
library(DBI, quietly = TRUE)
getDataFromHubSync <- function(sql){
dbname = "hub_sync"
user = "aline_read_user"
password = "5ync9uT011n3R3AdU53Rj850981"
host = "127.0.0.1"
con <- dbConnect(MySQL(),user=user,
password=password,
dbname=dbname,
host=host)
sql = gsub("\n", " ", sql)
dbSendQuery(con, 'SET @FIRST_DAY_LAST_MONTH = DATE_SUB((CURRENT_DATE - INTERVAL 1 MONTH), INTERVAL DAYOFMONTH(CURRENT_DATE - INTERVAL 1 MONTH)-1 DAY)')
dbSendQuery(con, 'SET @LAST_DAY_LAST_MONTH = LAST_DAY(CURRENT_DATE - INTERVAL 1 MONTH)')
dbSendQuery(con, 'SET @LAST_YEAR = DATE_ADD(NOW(), INTERVAL - 1 YEAR)')
rs <- dbSendQuery(con, sql)
data <- fetch(rs, n=-1)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
on.exit(dbDisconnect(con))
return(data)
}
sql = "SELECT *
FROM customers
INNER JOIN current_insurers
ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers
ON current_insurers.insurer_id = insurers.id
WHERE (policy_status = 'New Policy' or policy_status = 'Rebroked' or policy_status = 'Renewed' or policy_status = 'Pending Renewal' or policy_status = 'Renewal Received')
AND (code = 'AVT' OR code = 'AXT')"
dat <- getDataFromHubSync(sql)
dat <- subset(dat, dat$policy_id %in% t)
View(dat)
View(dat)
write.csv(x = dat, file = "P:/Duy/Temp/discount_removed.csv")
firstJune <- read.csv("ANA5_01_06_2016.txt", sep = "|")
View(firstJune)
secondJune1 <- read.csv("ANA6_02_06_2016.txt", sep = "|")
secondJune2 <- read.csv("ANA7_02_06_2016.txt", sep = "|")
View(firstJune)
View(secondJune1)
View(secondJune2)
data = rbind(firstJune, secondJune1, secondJune2)
View(data)
write.csv(x = data, file = "bd_data.csv")
source("P:/Duy/R/Chillidrive Analysis/connect_to_MySQL.R")
sql = "SELECT policy_id, policy_status, code, customers.mobile_num, email, inception_date, renewal_date, effective_date
FROM customers
INNER JOIN current_insurers ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers ON current_insurers.insurer_id = insurers.id
WHERE pol_type = 'PC'
AND !(policy_status = 'Cancelled' OR policy_status = 'Lapsed-lost' OR policy_status = 'Pending Cancellation' OR policy_status = 'Lapsed-rebroked')
AND (code = 'AVT' OR code = 'AXT' OR code = 'HIT')"
data <- getDataFromHubSync(sql)
View(data)
sql = "SELECT policy_id, policy_status, code, customers.mobile_num, email, inception_date, renewal_date, effective_date
FROM customers
INNER JOIN current_insurers ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers ON current_insurers.insurer_id = insurers.id
WHERE pol_type = 'PC'
AND !(policy_status = 'Cancelled' OR policy_status = 'Lapsed-lost' OR policy_status = 'Pending Cancellation' OR policy_status = 'Lapsed-rebroked')
AND (code = 'AVT' OR code = 'AXT' OR code = 'HIT')
AND renewal_date > NOW() - 1"
data <- getDataFromHubSync(sql)
View(data)
write.csv(x = data, file = "P:/Duy/Temp/temp.csv")
setwd("~/")
one <- read.csv("ANA1_14_03_2016.txt", sep = "|")
two <- read.csv("ANA2_24_03_2016.txt", sep = "|")
three <- read.csv("ANA3_18_05_2016.txt", sep = "|")
four <- read.csv("ANA4_25_05_2016.txt", sep = "|")
five <- read.csv("ANA5_01_06_2016.txt", sep = "|")
six <- read.csv("ANA6_02_06_2016.txt", sep = "|")
seven <- read.csv("ANA7_02_06_2016.txt", sep = "|")
eight <- read.csv("ANA8_11_06_2016.txt", sep = "|")
data = rbind(one, two, three, four, five, six, seven, eight)
write.csv(x = data, file = "bd_data.csv")
one <- read.csv("ANA1_14_03_2016.txt", sep = "|", stringsAsFactors = FALSE)
two <- read.csv("ANA2_24_03_2016.txt", sep = "|", stringsAsFactors = FALSE)
three <- read.csv("ANA3_18_05_2016.txt", sep = "|", stringsAsFactors = FALSE)
four <- read.csv("ANA4_25_05_2016.txt", sep = "|", stringsAsFactors = FALSE)
five <- read.csv("ANA5_01_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
six <- read.csv("ANA6_02_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
seven <- read.csv("ANA7_02_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
eight <- read.csv("ANA8_11_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
data = rbind(one, two, three, four, five, six, seven, eight)
View(data)
write.csv(x = data, file = "bd_data.csv")
temp1 <- read.csv("P:/Duy/Temp/temp.csv")
temp2 <- read.csv("P:/Duy/Temp/temp_2.csv")
'/1. Load the library'
library(lubridate)
source("P:/Duy/R/Chillidrive Analysis/connect_to_MySQL.R")
setwd("C:/Users/duy.bui/Documents/GitHub/driver-classification/")
# Declare constants
TODAY = Sys.Date()
DST.CONV.RATE = 0.000621371 #(1 meter = 0.000621371 miles)
MIN.AGG.DST = 100/DST.CONV.RATE #(in meters)
DAYTIME = 6
NIGHTTIME = 21
'/2. Collect data'
# Select trip data from telematics
sql = "select * from trips
inner join user_profiles
on trips.driver_id = user_profiles.id
AND trips.status = 'OK'"
trip_data <- getDataFromTelematics(sql)
# strptime(trip_data$date[1], format = "%Y-%m-%d %H:%M%S")
# t = format(trip_data$date[1], format = "%Y-%m-%d %H:%M%S")
# hour(trip_data$date[1])
# day(trip_data$date[1])
trip_data$time_of_day = ""
trip_data$trip_hour = hour(trip_data$date)
trip_data$time_of_day = ifelse(trip_data$trip_hour >= DAYTIME & trip_data$trip_hour < NIGHTTIME, "daytime", "nighttime")
daytime <- subset(trip_data, trip_data$trip_hour >= DAYTIME & trip_data$trip_hour < NIGHTTIME)
nighttime <- subset(trip_data, trip_data$trip_hour < DAYTIME | trip_data$trip_hour >= NIGHTTIME)
mean(daytime$score, na.rm = T)
mean(nighttime$score, na.rm = T)
rm(daytime, nighttime)
'/Score for night time driving is a little bit smaller than that during day time. This shows that the driving behaviour
is not affected much by the driving time'
createDataForClass <- function(trip_data){
# Distance_score per trip is calculated by taking trip distance multiplying with trip score
trip_data$distance_score <- trip_data$distance * trip_data$score
t1 = aggregate(distance ~ driver_id, data = trip_data, FUN = sum)
t2 = aggregate(distance_score ~ driver_id, data = trip_data, FUN = sum)
t <- merge(x = t1, y = t2, by.x = "driver_id", by.y = "driver_id", all = TRUE)
# Final score for each driver. Use it for category
t$final_score = t$distance_score/t$distance
t3 <- as.data.frame(table(trip_data$driver_id, trip_data$time_of_day))
daytime <- subset(t3, t3$Var2 == "daytime", select = c("Var1", "Freq"))
names(daytime) <- c("driver_id", "day")
nighttime <- subset(t3, t3$Var2 == "nighttime", select = c("Var1", "Freq"))
names(nighttime) <- c("driver_id", "night")
t4 <- merge(x = daytime, y = nighttime, by.x = "driver_id", by.y = "driver_id")
# Ratio of day over night
t4$ratio <- t4$day/(t4$night+1) # to avoid divide by 0
t5 <- merge(x = t, y = t4, by.x = "driver_id", by.y = "driver_id")
t5$total_trip = t5$day + t5$night
return(t5)
}
t <- createDataForClass(trip_data)
save(t, file = "data_for_classification.Rdata")
quantile(t$total_trip, seq(0.1, 1, 0.1))
# Remove any customers who have less than 20 trips in total
sql = "SELECT profile_id, driver_id, policy_distance, score, acceleration, braking, cornering, speeding, date, aggregated_distance
FROM profiles
INNER JOIN profile_sub_scores on profiles.sub_scores_id = profile_sub_scores.id"
all_profile_scores <- getDataFromTelematics(sql)
#to be deleted
all_profile_scores$date <- as.Date(all_profile_scores$date, format = '%Y-%m-%d')
all_profile_scores <- subset(all_profile_scores, all_profile_scores$date < TODAY)
all_profile_scores <- subset(all_profile_scores, all_profile_scores$profile_id %in%
aggregate(profile_id ~ driver_id, all_profile_scores, FUN = max)$profile_id &
all_profile_scores$aggregated_distance >= MIN.AGG.DST)
save(all_profile_scores, file = "all_profile_scores.Rdata")
library(lubridate)
library(rpart)
source("P:/Duy/R/Chillidrive Analysis/connect_to_MySQL.R")
setwd("C:/Users/duy.bui/Documents/GitHub/driver-classification/")
load("all_profile_scores.Rdata")
load("data_for_classification.Rdata")
m <- merge(x = all_profile_scores, y = t, by.x = "driver_id", by.y = "driver_id")
# Take a quantile
quantile(m$total_trip, seq(0.1, 1, 0.1))
# 10% is equal to 24 trips
m <- subset(m, m$total_trip > 20)
'/Categorise the fields
- Final score: over 60 as good, 30 to 60 as average, lower than 30 as bad'
m$driver_type = ""
m[m$final_score > 70, "driver_type"] = "good"
m[m$final_score > 50 & m$final_score <=70, "driver_type"] = "average"
m[m$final_score <= 50, "driver_type"] = "bad"
table(m$driver_type)
fit <- randomForest(driver_type ~ ratio, data=m, importance=TRUE, proximity=TRUE)
library(randomForest)
install.packages("randomForest")
library(randomForest)
fit <- randomForest(driver_type ~ ratio, data=m, importance=TRUE, proximity=TRUE)
fit <- randomForest(driver_type ~ ., data=m, importance=TRUE, proximity=TRUE)
attach(iris)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
head(iris)
unique(iris$Species)
unique(m$driver_type)
View(m)
class(iris$Species)
m$driver_type <- as.factor(m$driver_type) # convert to factor
fit <- randomForest(driver_type ~ ., data=m, importance=TRUE, proximity=TRUE)
fit <- randomForest(driver_type ~ ratio + total_trip, data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ ratio + total_trip + distance, data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ ratio , data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ acceleration + braking + cornering + speeding + ratio , data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ acceleration + braking + cornering + speeding , data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ acceleration + braking + cornering + speeding + ratio + distance, data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ acceleration + braking + cornering + speeding + distance, data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
fit <- randomForest(driver_type ~ acceleration + braking + cornering + speeding + ratio + distance, data=m, importance=TRUE, proximity=TRUE)
round(importance(fit), 2)
print(fit)
