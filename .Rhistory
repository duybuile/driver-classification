View(tripdata)
setwd("~/")
a <- read.table("buswrite.prt", header = "FALSE", sep = "|")
a <- read.table("buswrite.prt", sep = "|")
View(a)
a <- scan("buswrite.prt", sep = "|")
a <- scan("buswrite.prt", sep = "|", na.strings = FALSE)
a <- scan("buswrite.prt", sep = "|", na.strings = TRUE)
a <- read.table("buswrite.prt", sep = "|")
a <- read.csv("May_AVTAXT_DataHub.csv", header = TRUE)
b <- read.csv("May_AVTAXT_Electra.csv", header = TRUE)
b <- subset(b, b$Insurer == "AVT" | b$Insurer == "AXT")
table(duplicated(a$policy_id))
table(duplicated(b$Customer.ID))
setdiff(a$policy_id, b$Customer.ID)
a <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
b <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
b <- subset(b, b$Insurer == "AVT" | b$Insurer == "AXT")
table(duplicated(a$policy_id))
table(duplicated(b$Customer.ID))
setdiff(a$policy_id, b$Customer.ID)
diff <- subset(a, a$policy_id %in% setdiff(a$policy_id, b$Customer.ID))
View(diff)
year_datahub <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
year_electra <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
year_elccanl <- read.csv("2015_AVTAXT_Electra_Can.csv", header = TRUE)
year_electra <- subset(year_electra, year_electra$Insurer == "AVT" | year_electra$Insurer == "AXT", select = 1:76)
table(duplicated(month_datahub$policy_id))
table(duplicated(month_electra$Customer.ID))
diff <- subset(year_datahub, year_datahub$policy_id %in% setdiff(year_datahub$policy_id, year_electra$Customer.ID))
intersect(diff$policy_id, year_elccanl$Customer.ID)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number"))
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
intersect(diff$policy_id, year_elccanl$Customer.ID)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
View(m)
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number",
"Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
View(m)
strftime(m$renewal_date[1],"%d/%m/%Y")
m$renewal_date <- strftime(m$renewal_date,"%d/%m/%Y")
View(m)
setwd("~/")
library(xlsx2)
library(xlsx)
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE)
year_datahub <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
year_electra <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
year_elccanl <- read.csv("2015_AVTAXT_Electra_Can.csv", header = TRUE)
year_electra <- subset(year_electra, year_electra$Insurer == "AVT" | year_electra$Insurer == "AXT", select = 1:76)
table(duplicated(year_datahub$policy_id))
table(duplicated(year_electra$Customer.ID))
diff <- subset(year_datahub, year_datahub$policy_id %in% setdiff(year_datahub$policy_id, year_electra$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number",
"Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Renewal.Date", "Policy.Number", "Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE, append = TRUE)
m$renewal_date <- strftime(m$renewal_date,"%d/%m/%Y")
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE, append = TRUE)
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
setwd("~")
a <- read.csv("buswrite.prt", sep = "|", header = FALSE)
a <- read.csv("buswrite.prt", sep = "|", header = FALSE, stringsAsFactors = FALSE, strip.white = FALSE)
names(a) <- c("record_type", "client_code", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_type", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description", "special_cancellation")
table(a$record_type)
a <- read.csv("buswrite.prt", sep = "|", header = FALSE, stringsAsFactors = FALSE, strip.white = FALSE)
names(a) <- c("record_type", "client_code", "client_name", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description", "special_cancellation")
names(a) <- c("record_type", "client_code", "client_name", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_type", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description")
table(a$record_type)
table(a$debit_indicator_1)
table(a$debit_indicator_2)
table(a$debit_indicator_3)
table(a$debit_indicator_4)
charge_debit <- subset(a, a$debit_indicator_4 == "D")
head(charge_debit)
head(charge_debit, 10)
test <- subset(a, a$debit_indicator_2 == "D" & a$transaction_value > 0)
head(test)
test <- subset(a, a$debit_indicator_4 == "D" & a$transaction_value > 0)
write.csv(a, "a.csv", col.names = F, row.names = F)
library(xlsx)
write.xlsx(a, "a.xls", col.names = F, row.names = F)
write.xlsx2(a, "a.xls", sheetNames = "a", col.names = F, row.names = F)
test <- subset(a, a$debit_indicator_1 == "D" & a$transaction_value = 0)
test <- subset(a, a$debit_indicator_1 == "D" & a$transaction_value == 0)
test <- subset(a, a$debit_indicator_2 == "D" & a$commission == 0)
test <- subset(a, a$debit_indicator_3 == "D" & a$net_amount == 0)
test <- subset(a, a$debit_indicator_4 == "D" & a$charges == 0)
test <- subset(a, a$debit_indicator_4 == "" & a$charges > 0)
head(test)
test <- subset(a, a$debit_indicator_3 == "" & a$net_amount> 0)
head(test)
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
x <- c(1, 2, 4, 0)
y <- c(0.5,1,2,0)
fit <- lm(y~x)
print(fit)
-1 + 2*6
a = as.matrix(4, 3, 6, 9)
View(a)
matrix(c(4,3,6,9), nrow = 2, ncol = 2)
matrix(c(4,6,3,9), nrow = 2, ncol = 2)
u = matrix(c(4, -4, 3), nrow = 3, ncol = 1)
v = matrix(c(4, 2, 4), nrow = 3, ncol = 1)
t(u)*v
t(u)
x = t(u)
x = as.matrix(t(u))
x*u
4*4+(-4)*2+(-3)*4
x %*% u
x %*% v
x
u = matrix(c(4, -4, -3), nrow = 3, ncol = 1)
t(u)%*%v
duy <- c(343150, 342790, 343234, 297477, 313996, 340309, 343670, 331687, 343915, 343326, 343881, 344129, 342199, 336371, 343386, 337009, 344265, 342940, 341928, 343940, 343935, 341001, 344646, 343071, 318677, 307656, 340460, 343671, 343737, 343807, 344533, 288222, 345074, 345582, 345758, 337208, 345914, 345840, 317103, 343951, 340503, 294280, 341784, 345372, 344279, 346932, 313419, 346909, 346912, 345763, 345456, 347234, 347298, 298957, 347042, 343203, 345827, 346207, 333855, 346385, 347805, 347841, 347522, 345701, 321218, 347932, 346332, 346864, 347682, 343667, 340152, 347910, 347031, 347982, 348257, 347766, 348457, 348676, 348238, 348218, 348541, 103137, 348413, 348694, 346475, 348418, 348530, 345638, 346914, 348620, 348740, 278106, 322097, 348496, 343707, 348055, 349163, 347136, 323094, 349102, 349106, 321452, 304317, 347383, 347849, 349123, 344320, 300544, 348929, 346017, 349303, 297735, 347912, 324639, 349061, 349357, 348952)
david <- c(323434, 301155, 285568, 319478, 300018, 281838, 128886, 323012, 296093, 306371, 306643, 281771, 307711, 306968, 333385, 334894, 217208, 305119, 337928, 337502, 339893, 339463, 315188, 271801, 293059, 296068, 316783, 317193, 337371, 343166, 341603, 343419, 317417, 295333, 274030, 326494, 327094, 342033, 343594, 279300, 343396, 342658, 343640, 342537, 335274, 342072, 238354, 295092, 313925, 292110, 342336, 318156, 344537, 318556, 344441, 343647, 344572, 344111, 344628, 342898, 295748, 343380, 344978, 343053, 294748, 344578, 319018, 327790, 344313, 296521, 244510, 345190, 319363, 343739, 344582, 294403, 344635, 295737, 345370, 312627, 318604, 297016, 319375, 296069, 345641, 224089, 294647, 345718, 319879, 320903, 345617, 345954, 341033, 333234, 324479, 346123, 345925, 297235, 320250, 316730, 320273, 306651, 346236, 344292, 296209, 339653, 320206, 345853, 340164, 345238, 346057, 346012, 345549, 319676, 313772, 346415, 346347, 320626, 311539, 346220, 346647, 293252, 346361, 346296, 296119, 346643, 346993, 346911, 346813, 346957, 346936, 346804, 345601, 297900, 347009, 346921, 345816, 346933, 320833, 320774, 328999, 321053, 321390, 337569, 342836, 347128, 347195, 347475, 346558, 320684, 346659, 346758, 319826, 337842, 321817, 345796, 321802, 298160, 346300, 347945, 343508, 321957, 321460, 347141, 348143, 348165, 348127, 343513, 321313, 317212, 341348, 317859, 347037, 348094, 322211, 118874, 322300, 348406, 322081, 348068, 319754, 348511, 348593, 348384, 348198, 346038, 348499, 335368, 348410, 345092, 346417, 348070, 347927, 347993, 345581, 346371, 346703, 340572, 347787, 347571, 348802, 348278, 313478, 319364, 346589, 349013, 348939, 202990, 349015, 320919, 322885, 348396, 334468, 348349, 348124, 316674, 348948, 349429, 347098, 299159, 349468, 348961, 349021, 349295, 297889, 278690, 349537, 349438, 323618, 347122, 349835, 349895, 323988, 349407, 321049, 348705, 338957, 349869, 348997, 340005, 333655, 350074, 349948, 230056, 312616, 349262, 350095, 348661, 349508, 348794, 115833, 324746, 323487, 346406, 319099)
intersect(x, y)
intersect(duy, david)
diff(duy, david)
setdiff(duy, david)
n = setdiff(duy, david)
.libPaths()
Sys.getenv()
.libPaths()
as.Date(18918, origin="1899-12-30")
library(xlsx)
library(xlsx)
t <- c("355515", "351625", "354967", "341603", "328999", "335831", "345601", "346361", "347475", "348511", "309136", "335357", "342669", "351103", "351249", "351299", "355420", "289207", "294748", "230056", "321957", "326494", "344572", "344628", "351153", "118874", "349468", "343508", "322211", "297016", "316869", "337371")
library(RMySQL)
library(DBI, quietly = TRUE)
getDataFromHubSync <- function(sql){
dbname = "hub_sync"
user = "aline_read_user"
password = "5ync9uT011n3R3AdU53Rj850981"
host = "127.0.0.1"
con <- dbConnect(MySQL(),user=user,
password=password,
dbname=dbname,
host=host)
sql = gsub("\n", " ", sql)
dbSendQuery(con, 'SET @FIRST_DAY_LAST_MONTH = DATE_SUB((CURRENT_DATE - INTERVAL 1 MONTH), INTERVAL DAYOFMONTH(CURRENT_DATE - INTERVAL 1 MONTH)-1 DAY)')
dbSendQuery(con, 'SET @LAST_DAY_LAST_MONTH = LAST_DAY(CURRENT_DATE - INTERVAL 1 MONTH)')
dbSendQuery(con, 'SET @LAST_YEAR = DATE_ADD(NOW(), INTERVAL - 1 YEAR)')
rs <- dbSendQuery(con, sql)
data <- fetch(rs, n=-1)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
on.exit(dbDisconnect(con))
return(data)
}
sql = "SELECT *
FROM customers
INNER JOIN current_insurers
ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers
ON current_insurers.insurer_id = insurers.id
WHERE (policy_status = 'New Policy' or policy_status = 'Rebroked' or policy_status = 'Renewed' or policy_status = 'Pending Renewal' or policy_status = 'Renewal Received')
AND (code = 'AVT' OR code = 'AXT')"
dat <- getDataFromHubSync(sql)
dat <- getDataFromHubSync(sql)
library(RMySQL)
library(DBI, quietly = TRUE)
getDataFromHubSync <- function(sql){
dbname = "hub_sync"
user = "aline_read_user"
password = "5ync9uT011n3R3AdU53Rj850981"
host = "127.0.0.1"
con <- dbConnect(MySQL(),user=user,
password=password,
dbname=dbname,
host=host)
sql = gsub("\n", " ", sql)
dbSendQuery(con, 'SET @FIRST_DAY_LAST_MONTH = DATE_SUB((CURRENT_DATE - INTERVAL 1 MONTH), INTERVAL DAYOFMONTH(CURRENT_DATE - INTERVAL 1 MONTH)-1 DAY)')
dbSendQuery(con, 'SET @LAST_DAY_LAST_MONTH = LAST_DAY(CURRENT_DATE - INTERVAL 1 MONTH)')
dbSendQuery(con, 'SET @LAST_YEAR = DATE_ADD(NOW(), INTERVAL - 1 YEAR)')
rs <- dbSendQuery(con, sql)
data <- fetch(rs, n=-1)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
on.exit(dbDisconnect(con))
return(data)
}
sql = "SELECT *
FROM customers
INNER JOIN current_insurers
ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers
ON current_insurers.insurer_id = insurers.id
WHERE (policy_status = 'New Policy' or policy_status = 'Rebroked' or policy_status = 'Renewed' or policy_status = 'Pending Renewal' or policy_status = 'Renewal Received')
AND (code = 'AVT' OR code = 'AXT')"
dat <- getDataFromHubSync(sql)
dat <- subset(dat, dat$policy_id %in% t)
View(dat)
View(dat)
write.csv(x = dat, file = "P:/Duy/Temp/discount_removed.csv")
firstJune <- read.csv("ANA5_01_06_2016.txt", sep = "|")
View(firstJune)
secondJune1 <- read.csv("ANA6_02_06_2016.txt", sep = "|")
secondJune2 <- read.csv("ANA7_02_06_2016.txt", sep = "|")
View(firstJune)
View(secondJune1)
View(secondJune2)
data = rbind(firstJune, secondJune1, secondJune2)
View(data)
write.csv(x = data, file = "bd_data.csv")
source("P:/Duy/R/Chillidrive Analysis/connect_to_MySQL.R")
sql = "SELECT policy_id, policy_status, code, customers.mobile_num, email, inception_date, renewal_date, effective_date
FROM customers
INNER JOIN current_insurers ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers ON current_insurers.insurer_id = insurers.id
WHERE pol_type = 'PC'
AND !(policy_status = 'Cancelled' OR policy_status = 'Lapsed-lost' OR policy_status = 'Pending Cancellation' OR policy_status = 'Lapsed-rebroked')
AND (code = 'AVT' OR code = 'AXT' OR code = 'HIT')"
data <- getDataFromHubSync(sql)
View(data)
sql = "SELECT policy_id, policy_status, code, customers.mobile_num, email, inception_date, renewal_date, effective_date
FROM customers
INNER JOIN current_insurers ON customers.current_insurer_id = current_insurers.id
INNER JOIN insurers ON current_insurers.insurer_id = insurers.id
WHERE pol_type = 'PC'
AND !(policy_status = 'Cancelled' OR policy_status = 'Lapsed-lost' OR policy_status = 'Pending Cancellation' OR policy_status = 'Lapsed-rebroked')
AND (code = 'AVT' OR code = 'AXT' OR code = 'HIT')
AND renewal_date > NOW() - 1"
data <- getDataFromHubSync(sql)
View(data)
write.csv(x = data, file = "P:/Duy/Temp/temp.csv")
setwd("~/")
one <- read.csv("ANA1_14_03_2016.txt", sep = "|")
two <- read.csv("ANA2_24_03_2016.txt", sep = "|")
three <- read.csv("ANA3_18_05_2016.txt", sep = "|")
four <- read.csv("ANA4_25_05_2016.txt", sep = "|")
five <- read.csv("ANA5_01_06_2016.txt", sep = "|")
six <- read.csv("ANA6_02_06_2016.txt", sep = "|")
seven <- read.csv("ANA7_02_06_2016.txt", sep = "|")
eight <- read.csv("ANA8_11_06_2016.txt", sep = "|")
data = rbind(one, two, three, four, five, six, seven, eight)
write.csv(x = data, file = "bd_data.csv")
one <- read.csv("ANA1_14_03_2016.txt", sep = "|", stringsAsFactors = FALSE)
two <- read.csv("ANA2_24_03_2016.txt", sep = "|", stringsAsFactors = FALSE)
three <- read.csv("ANA3_18_05_2016.txt", sep = "|", stringsAsFactors = FALSE)
four <- read.csv("ANA4_25_05_2016.txt", sep = "|", stringsAsFactors = FALSE)
five <- read.csv("ANA5_01_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
six <- read.csv("ANA6_02_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
seven <- read.csv("ANA7_02_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
eight <- read.csv("ANA8_11_06_2016.txt", sep = "|", stringsAsFactors = FALSE)
data = rbind(one, two, three, four, five, six, seven, eight)
View(data)
write.csv(x = data, file = "bd_data.csv")
temp1 <- read.csv("P:/Duy/Temp/temp.csv")
temp2 <- read.csv("P:/Duy/Temp/temp_2.csv")
vecA <- c(340309, 357858, 343380, 365179, 345582, 319018, 365669, 363642, 345701, 310094, 316932, 352402, 355658, 364019, 358552, 307656, 302061, 337740, 358668, 359785, 327552, 224231, 346643, 339410, 332688, 336468, 312268, 315188, 338115, 308767, 333978, 337802, 307773, 337928, 327439, 316635, 339314, 340427, 332113, 330915, 329212, 302884, 357187, 336738, 353864, 334295, 341822, 361991, 333469, 326373, 354482, 360866, 355888, 335839, 356973, 338468, 337942, 297572, 369962, 334706, 332304, 364187, 331034, 363100, 348858, 354826, 359409, 313503, 330025, 343915, 345722, 356136, 362740, 314284, 346911, 359627, 331533, 351545, 360190, 304413, 360108, 313411, 360185, 347465, 366169, 358628, 341468, 311869, 360517, 356714, 283895, 308629, 360894, 331422, 359141, 313218, 354645, 361019, 329484, 358836, 358408, 361148, 358484, 355431, 358124, 359663, 358932, 358000, 360598, 359620, 307393, 358901, 310145, 360385, 359732, 359733, 359231, 360355, 311590, 360774, 360344, 286460, 357483, 362281, 348955, 361217, 353105, 361431, 362479, 361548, 363519, 264153, 362978, 334510, 361710, 360117, 334621, 363403, 363539, 361649, 362669, 333020, 363855, 364690, 370093, 363817, 363950, 363923, 340956, 358053, 364084, 360595, 363094, 361482, 362580, 358720, 362499, 365849, 357717, 366798, 364585, 362255, 361740, 365178, 363510, 363164, 361578, 295219, 366398, 361582, 364321, 362903, 365370, 354134, 362831, 364361, 363707, 310574, 335507, 338390, 364564, 287355, 363169, 364932, 366889, 334884, 365999, 366179, 348107, 364805, 363931, 366145, 363254, 365239, 365845, 364086, 366003, 340094, 333180, 358094, 366265, 365939, 361126, 364073, 365412, 365914, 363670, 369563, 367129, 367075, 363165, 345606, 353588, 337460, 365300, 317486, 366911, 365164, 292461, 367162, 354458, 365747, 367039, 368245, 338052, 367397, 361320, 363572, 368180, 367998, 367197, 356301, 368203, 335280, 361949, 368995, 362382, 368219, 369458, 344502, 357685, 355884, 367491, 369456, 366993, 366117, 305374, 370481, 369105, 367954, 370354, 307203, 356460, 353075, 364140, 369798, 356976, 368521, 369878, 370457, 368874, 366637, 339869, 370085, 370978, 262874, 358063, 285413, 370604, 370504, 369017, 370193, 368343, 369971, 381588, 330338, 369424, 370828, 370928, 367687, 271900, 311713, 289398, 368659, 355667, 334673, 339457, 371528, 340137, 340738, 366574, 313983, 342872, 372517, 343842, 356496, 370882, 357028, 371862, 372316, 361432, 362562, 365118, 365313, 372034, 365488, 366491, 351939, 368098, 372412, 368989, 368463, 370133, 374339, 370233, 362066, 374205, 374174, 370574, 370429, 366061, 371415, 371724, 374458, 371755, 372458, 374917, 372721, 375700, 374019, 372571, 372152, 372651, 293859, 372767, 377073, 373267, 373652, 373769, 374361, 374699, 374873, 377767, 375279, 375947, 362555, 374958, 375448, 375505, 377106, 377865, 376152, 378095, 376174, 376338, 376895, 377086, 377326, 344616, 377186, 378466, 375443, 377445, 377494, 379932, 378387, 378400, 378477, 380220, 379034, 376296, 379790, 379130, 380234, 380515, 380821, 381262, 381228)
vecB <- c(343150, 343915, 343326, 307656, 346643, 346911, 313419, 346912, 337928, 320833, 381588, 315188, 327439, 326373, 334295, 332688, 338468, 314360, 336696, 332907, 337656, 308171, 316650, 294758, 341822, 337942, 337740, 337802, 313503, 333216, 306903, 370250, 297572, 340094, 331034, 329212, 339314, 334706, 330915, 335839, 333469, 316635, 327552, 283895, 308629, 313218, 357187, 357858, 358408, 332113, 358484, 224231, 354645, 358932, 358124, 329484, 359141, 313411, 358552, 359785, 358836, 359620, 358668, 358000, 331533, 354826, 360598, 307393, 360384, 310145, 360385, 359627, 358901, 360774, 310094, 360344, 353105, 352402, 316932, 360117, 360866, 340956, 358053, 361548, 360595, 357717, 361710, 361431, 333020, 361740, 361649, 361991, 361578, 362255, 348955, 361582, 362831, 363519, 286460, 362903, 363164, 363707, 295219, 338390, 287355, 359733, 364019, 334884, 364187, 364690, 363642, 364932, 365179, 363931, 362740, 363254, 363169, 365239, 364086, 365849, 364073, 333180, 358094, 365999, 366169, 365412, 365669, 363100, 365845, 366889, 367129, 363165, 366398, 353588, 363670, 363094, 354458, 365914, 311869, 367039, 361320, 366003, 311590, 367998, 366265, 356301, 366798, 367197, 368203, 368219, 357685, 362382, 305374, 367162, 368180, 367954, 356976, 369105, 339869, 364140, 368874, 285413, 368582, 366993, 353075, 262874, 369458, 345606, 369971, 368521, 369017, 370093, 330338, 368343, 370193, 369563, 365164, 369962, 370481, 370828, 314284, 370354, 370457, 369424, 355884, 370978, 271900, 339457, 365313, 334673, 340137, 371724, 370133, 368989, 372458, 372571, 366491, 372651, 371755, 365118, 373769, 340738, 368098, 371415, 356496, 374699, 374873, 370233, 362562, 372765, 375448, 370574, 376174, 373009, 374361, 342872, 373267, 365488, 376338, 376152, 377186, 372767, 377562, 343842, 357028, 361432, 378086, 375505, 377494, 378400, 373652, 375041, 379130, 378477, 379836, 376895, 380234, 379034, 380555, 289398, 379980, 380515, 380700, 377445, 380835, 380373, 378387, 379900, 380821, 378041, 372620, 381262, 344307, 381524, 380445, 381295, 380993, 364160, 378537, 381768, 381372, 381363, 381283, 371861, 372074, 372741, 377244, 339054, 382044, 378977, 378682, 382060, 346292, 379447, 380452, 381773, 378228, 380805, 382429)
vecA %in% vecB
table(vecA %in% vecB)
'/1. Load the library'
library(lubridate)
source("P:/Duy/R/Chillidrive Analysis/connect_to_MySQL.R")
setwd("C:/Users/duy.bui/Documents/GitHub/driver-classification/")
# Declare constants
TODAY = Sys.Date()
DST.CONV.RATE = 0.000621371 #(1 meter = 0.000621371 miles)
MIN.AGG.DST = 100/DST.CONV.RATE #(in meters)
DAYTIME = 6
NIGHTTIME = 21
'/RUN THE PROGRAM FROM HERE'
library(lubridate)
library(rpart)
library(randomForest)
library(VSURF)
library(caret)
source("P:/Duy/R/Chillidrive Analysis/connect_to_MySQL.R")
setwd("C:/Users/duy.bui/Documents/GitHub/driver-classification/")
load("all_profile_scores.Rdata")
load("data_for_classification.Rdata")
library(rpart)
'/USE CART from rpart to find the relavant features'
m <- merge(x = all_profile_scores, y = t, by.x = "driver_id", by.y = "driver_id")
m <- subset(m, !is.na(m$dob) & !is.na(m$gender))
age = function(from, to = Sys.Date()) {
from_lt = as.POSIXlt(from)
to_lt = as.POSIXlt(to)
age = to_lt$year - from_lt$year
ifelse(to_lt$mon < from_lt$mon |
(to_lt$mon == from_lt$mon & to_lt$mday < from_lt$mday),
age - 1, age)
}
m$age <- age(m$dob)
m$gender <- as.factor(m$gender)
# Take a quantile
quantile(m$total_trip, seq(0.1, 1, 0.1))
# 10% is equal to 24 trips
m <- subset(m, m$total_trip > 20)
'/Categorise the fields
- Final score: over 60 as good, 30 to 60 as average, lower than 30 as bad'
m$driver_type = ""
m[m$final_score >= 80, "driver_type"] = "excellent"
m[m$final_score >= 50 & m$final_score <80, "driver_type"] = "good"
m[m$final_score >= 30 & m$final_score <50, "driver_type"] = "average"
m[m$final_score < 30, "driver_type"] = "bad"
m$driver_type <- as.factor(m$driver_type) # convert to factor
table(m$driver_type)
set.seed(10)
inTrain <- createDataPartition(y = m$driver_type, p = 0.7, list = FALSE)
training <- m[inTrain,]
testing <- m[-inTrain,]
modFit <- train(driver_type ~ ratio + total_trip +  age, data = m, importance = T, proximity = T, method = "rf")
modFit
modFit2 <- train(driver_type ~ ratio + total_trip, data = m, importance = T, proximity = T, method = "rf")
modFit2
predicted <- predict(modFit, newdata = training)
table(predicted == training$driver_type)
predicted2 <- predict(modFit, newdata = testing)
table(predicted2 == testing$driver_type)
confusionMatrix(table(predicted, training$driver_type))$overall
confusionMatrix(table(predicted2, testing$driver_type))$overall
#--------
predicted <- predict(modFit2, newdata = training)
table(predicted == training$driver_type)
predicted2 <- predict(modFit2, newdata = testing)
table(predicted2 == testing$driver_type)
confusionMatrix(table(predicted, training$driver_type))$overall
confusionMatrix(table(predicted2, testing$driver_type))$overall
#-----------
load("employment.Rdata")
t <- merge(x = m, y = employment_status, by.x = "policy_id", by.y = "policy_id", all.x = T)
t$employment_status_ft <- as.factor(t$employment_status_ft)
t <- subset(t, !is.na(t$employment_status_ft))
set.seed(10)
inTrain <- createDataPartition(y = t$driver_type, p = 0.7, list = FALSE)
training <- t[inTrain,]
testing <- t[-inTrain,]
modFit3 <- train(driver_type ~ age + gender + employment_status_ft, data = t, importance = T, proximity = T, method = "rf")
modFit3
predicted <- predict(modFit3, newdata = training)
table(predicted == training$driver_type)
predicted2 <- predict(modFit3, newdata = testing)
table(predicted2 == testing$driver_type)
confusionMatrix(table(predicted, training$driver_type))$overall
confusionMatrix(table(predicted2, testing$driver_type))$overall
table(t$age)
table(t$gender)
table(t$employment_status_ft)
table(t$driver_type)
ggplot(t, aes(x=age)) +
geom_histogram(aes(y=..density..), binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(age, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
source('~/GitHub/driver-classification/classification.R', echo=TRUE)
ggplot(t, aes(x=age)) +
geom_line(aes(y=..density..), binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(age, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
line(t$age)
plot(t$age)
plot(t$age, type = "l")
plot(t$age, type = "h")
plot(t$age, t$driver_type, type = "h")
plot(t$age, t$driver_type)
plot(t$age, t$driver_type, type = "l")
plot(t$driver_type, t$age, type = "l")
plot(t$driver_type, t$age)
plot(t$driver_type, t$age)
plot(t$age)
plot(x = t$age)
plot(y = t$age)
hist(t$age)
plot(t$age, xlim = "Age", main = "Age distribution")
plot(t$age, xlim = 50, main = "Age distribution")
plot(t$age, xlim = c(16,50), main = "Age distribution")
plot(t$age, ylim = c(16,50), main = "Age distribution")
plot(t$age, ylim = c(16,50), main = "Age distribution", ylab = "Age")
plot(t$gender)
plot(t$gender, ylim = c(0, 1000))
plot(t$gender, ylim = c(0, 800), main = "Gender distribution")
plot(t$gender, ylim = c(0, 800), main = "Gender distribution", type = "b")
plot(t$employment_status_ft)
plot(t$employment_status_ft, ylim = c(0, 1000), main = "Employment distribution")
table(t$employment_status_ft)
plot(t$employment_status_ft, ylim = c(0, 1000), main = "Employment distribution", xlab = "Employment status")
piechart(t$driver_type)
piechart(x = t$driver_type)
library(graphics)
piechart(x = t$driver_type)
plot(t$driver_type)
plot(t$driver_type, ylim = c(0, 1500))
piedat <- as.data.frame(table(t$driver_type))
View(piedat)
pie(piedat$Freq, labels = piedat$Var1, main="Pie Chart of Countries")
par(mfrow= c(2, 2))
plot(t$age, ylim = c(16,50), main = "Age distribution", ylab = "Age")
plot(t$gender, ylim = c(0, 800), main = "Gender distribution")
plot(t$employment_status_ft, ylim = c(0, 1000), main = "Employment distribution", xlab = "Employment status")
piedat <- as.data.frame(table(t$driver_type))
pie(piedat$Freq, labels = piedat$Var1, main="Driver type distribution")
View(piedat)
1342/(sum(piedat$Freq))
1-0.8586
pie(piedat$Freq, labels = piedat$Var1, main="Driver type distribution")
par(mfrow= c(1, 2))
#plot(t$age, ylim = c(16,50), main = "Age distribution", ylab = "Age")
plot(t$gender, ylim = c(0, 800), main = "Gender distribution")
plot(t$employment_status_ft, ylim = c(0, 1000), main = "Employment distribution", xlab = "Employment status")
par(mfrow= c(1, 2))
#plot(t$age, ylim = c(16,50), main = "Age distribution", ylab = "Age")
plot(t$gender, ylim = c(0, 800), main = "Gender distribution")
plot(t$employment_status_ft, ylim = c(0, 1000), main = "Employment distribution")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(t$age, ylim = c(16,50), main = "Age distribution", ylab = "Age")
plot(t$gender, ylim = c(0, 800), main = "Gender distribution")
plot(t$employment_status_ft, ylim = c(0, 1000), main = "Employment distribution")
plot(modFit3, log="y")
varImpPlot(modFit3)
MDSplot(modFit3, t$driver_type)
class(modFit3)
plot(modFit3$finalModel)
plot(modFit3$finalModel)
text(modFit3$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit3$finalModel)
plot(modFit3, log="y")
table(m$driver_type)
plot(m$total_trip)
plot(m$ratio)
plot(m$ratio, type = "l")
par(mfrow= c(1, 2))
plot(m$total_trip)
plot(m$ratio, type = "l")
par(mfrow= c(1, 2))
plot(m$total_trip, xlab = "")
plot(m$ratio, type = "l", xlab = "")
plot(m$ratio, type = "l", xlab = "", ylab = "Ratio of daytime over night time driving")
par(mfrow= c(1, 2))
plot(m$total_trip, xlab = "", ylab = "Total trips")
plot(m$ratio, type = "l", xlab = "", ylab = "Ratio of daytime over night time driving")
plot(m$total_trip, xlab = "", ylab = "Total trips")
plot(m$ratio, xlab = "", ylab = "Ratio of daytime over night time driving")
plot(m$ratio, xlab = "", ylab = "Ratio of daytime over night time driving", ylim = c(0, 200))
plot(m$ratio, xlab = "", ylab = "Ratio of daytime over night time driving", ylim = c(0, 50))
par(mfrow= c(1, 2))
plot(m$total_trip, xlab = "", ylab = "Total trips")
plot(m$ratio, xlab = "", ylab = "Ratio of daytime over night time driving", ylim = c(0, 50))
log(modFit)
plot(modFit)
plot(modFit, log = "y")
plot(modFit2, log = "y")
plot(modFit, log = "y")
plot(modFit3, log = "y")
plot(modFit2, log = "y")
confusionMatrix(table(predicted, training$driver_type))$overall
varImp(modFit)
importance(modFit$finalModel)
print(modFit$finalModel)
varImp(modFit2)
importance(modFit2$finalModel)
print(modFit2$finalModel)
print(modFit$finalModel)
varImp(modFit3)
importance(modFit3$finalModel)
print(modFit3$finalModel)
